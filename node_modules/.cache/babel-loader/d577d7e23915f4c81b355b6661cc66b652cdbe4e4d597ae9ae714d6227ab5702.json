{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport DashboardChart from \"./DashboardChart.vue\";\nimport DashboardChartuser from \"./DashboardChartuser.vue\"; // Adjust the path as needed\n// Adjust the path as needed\n\nexport default {\n  components: {\n    DashboardChart,\n    DashboardChartuser\n    // Other components...\n  },\n  data() {\n    return {\n      tot: \"\",\n      appLoading: false,\n      totalBlogs: 0,\n      // Initialize the totalBlogs data property\n      yourBlogsCount: 0,\n      totalUsers: 0,\n      // Initialize the yourBlogsCount data property\n      userType: localStorage.getItem(\"userType\") // Retrieve userType from localStorage\n    };\n  },\n  mounted() {\n    // Call the method to fetch counts based on userType\n    if (this.userType === \"admin\") {\n      this.fetchTotalBlogs();\n      this.fetchTotalUsers();\n    } else if (this.userType === \"user\") {\n      this.fetchUserBlogsCount();\n    }\n  },\n  methods: {\n    fetchTotalUsers() {\n      this.appLoading = true;\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n      // Query the users collection and get the total count of documents\n      db.collection(\"users\").get().then(querySnapshot => {\n        // Set the totalUsers data property to the count of documents\n        this.totalUsers = querySnapshot.size;\n        this.tot = this.totalUsers;\n        console.log(\"tot is\", this.tot);\n        this.appLoading = false;\n      }).catch(error => {\n        // Handle any errors that occur during the Firestore operation\n        console.error(\"Error fetching total users:\", error);\n        // Optionally, provide feedback to the user about the error\n      });\n    },\n    fetchTotalBlogs() {\n      this.appLoading = true;\n\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n\n      // Query the blogs collection and get the total count of documents\n      db.collection(\"blogs\").get().then(querySnapshot => {\n        // Set the totalBlogs data property to the count of documents\n        this.totalBlogs = querySnapshot.size;\n        this.appLoading = false;\n      }).catch(error => {\n        // Handle any errors that occur during the Firestore operation\n        console.error(\"Error fetching total blogs:\", error);\n        // Optionally, provide feedback to the user about the error\n      });\n    },\n    fetchUserBlogsCount() {\n      this.appLoading = true;\n\n      // Get the current user's ID\n      const userId = firebase.auth().currentUser.uid;\n\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n\n      // Query the blogs collection and filter by the current user's ID\n      db.collection(\"blogs\").where(\"userId\", \"==\", userId) // Replace \"userId\" with the field name that represents the user ID in your blogs collection\n      .get().then(querySnapshot => {\n        // Set the yourBlogsCount data property to the count of documents\n        this.yourBlogsCount = querySnapshot.size;\n        this.appLoading = false;\n      }).catch(error => {\n        // Handle any errors that occur during the Firestore operation\n        console.error(\"Error fetching user blogs count:\", error);\n        // Optionally, provide feedback to the user about the error\n        this.appLoading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["firebase","DashboardChart","DashboardChartuser","components","data","tot","appLoading","totalBlogs","yourBlogsCount","totalUsers","userType","localStorage","getItem","mounted","fetchTotalBlogs","fetchTotalUsers","fetchUserBlogsCount","methods","db","firestore","collection","get","then","querySnapshot","size","console","log","catch","error","userId","auth","currentUser","uid","where"],"sources":["public/DashBoard.vue"],"sourcesContent":["\n<template>\n  <div>\n    <v-layout wrap justify-center>\n      <vue-element-loading\n        :active=\"appLoading\"\n        :is-full-screen=\"true\"\n        background-color=\"#FFFFFF\"\n        color=\"#192841\"\n        spinner=\"line-scale\"\n      />\n      <v-flex xs11>\n        <v-layout wrap justify-center>\n          <v-flex xs12 text-left py-4>\n            <span style=\"font-size: 25px; font-weight: bolder\">DASHBOARD</span>\n          </v-flex>\n        </v-layout>\n        <v-layout justify-center wrap v-if=\"userType === 'admin'\">\n          <v-flex v-if=\"userType === 'admin'\" xs12 pt-6>\n            <v-layout wrap justify-center style=\"color: white\">\n              <!-- Total Blogs -->\n              <v-flex xs12 sm6 lg6 pa-3>\n                <v-card class=\"gradient-card\">\n                  <v-card-text>\n                    <v-icon color=\"white\">mdi-post-outline</v-icon>\n                    <div style=\"color: white; font-size: 20px\">\n                      TOTAL BLOGS\n                      <p v-if=\"userType === 'user'\">{{ yourBlogsCount }}</p>\n                      <p v-else>{{ totalBlogs }}</p>\n                    </div>\n                  </v-card-text>\n                </v-card>\n              </v-flex>\n\n              <!-- Published Blogs -->\n              <v-flex xs12 sm6 lg6 pa-3>\n                <v-card class=\"gradient-card2\">\n                  <v-card-text>\n                    <v-icon color=\"white\">mdi-publish</v-icon>\n\n                    <div style=\"color: white; font-size: 20px\">\n                      <h3>PUBLISHED BLOGS</h3>\n                      <p>{{ totalBlogs }}</p>\n                    </div>\n                  </v-card-text>\n                </v-card>\n              </v-flex>\n\n              <!-- Total Users -->\n              <v-flex xs12 sm6 lg6 pa-3 v-if=\"userType === 'admin'\">\n                <v-card class=\"gradient-card5\">\n                  <v-card-text>\n                    <v-icon color=\"white\">mdi-account-group </v-icon>\n                    <div style=\"color: white; font-size: 20px\">\n                      <h3>TOTAL USERS</h3>\n\n                      <p>{{ totalUsers }}</p>\n                    </div>\n                  </v-card-text>\n                </v-card>\n              </v-flex>\n\n              <!-- New User Registrations -->\n              <v-flex xs12  sm6 lg6 pa-3 v-if=\"userType === 'admin'\">\n                <v-card class=\"gradient-card6\">\n                  <v-card-text>\n                    <v-icon color=\"white\">mdi-account-badge-outline </v-icon>\n                    <br />\n                    <div style=\"color: white; font-size: 20px\">\n                      <h3>NEW USER REGISTRATIONS</h3>\n                      <p>{{ totalUsers }}</p>\n                    </div>\n                  </v-card-text>\n                </v-card>\n              </v-flex>\n            </v-layout>\n          </v-flex>\n\n          <v-flex xs12 v-if=\"userType === 'admin'\">\n            <DashboardChart\n              :totalBlogs=\"totalBlogs\"\n              :publishedBlogs=\"totalBlogs\"\n              :totalUsers=\"totalUsers\"\n              :newUserRegistrations=\"totalUsers\"\n            />\n          </v-flex>\n        </v-layout>\n        <v-layout wrap justify-center v-else>\n          <v-flex xs12 sm5 lg6 pa-3>\n            <v-card class=\"gradient-card\">\n              <v-card-text>\n                <v-icon color=\"white\">mdi-post-outline</v-icon>\n                <div style=\"color: white; font-size: 20px\">\n                  TOTAL BLOGS\n                  <p v-if=\"userType === 'user'\">{{ yourBlogsCount }}</p>\n                  \n                </div>\n              </v-card-text>\n            </v-card>\n          </v-flex>\n\n          <!-- Published Blogs -->\n          <v-flex xs12 sm5 lg6 pa-3>\n            <v-card class=\"gradient-card2\">\n              <v-card-text>\n                <v-icon color=\"white\">mdi-publish</v-icon>\n\n                <div style=\"color: white; font-size: 20px\">\n                  <h3>PUBLISHED BLOGS</h3>\n                  <p>{{ yourBlogsCount }}</p>\n                </div>\n              </v-card-text>\n            </v-card>\n          </v-flex>\n\n          <v-flex xs12 v-if=\"userType === 'user'\">\n            <DashboardChartuser\n              :totalBlogs=\"yourBlogsCount\"\n              :publishedBlogs=\"yourBlogsCount\"\n             \n            />\n          </v-flex>\n        </v-layout>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport DashboardChart from \"./DashboardChart.vue\"; \nimport DashboardChartuser from \"./DashboardChartuser.vue\"; // Adjust the path as needed\n// Adjust the path as needed\n\nexport default {\n  components: {\n    DashboardChart,\n    DashboardChartuser,\n    // Other components...\n  },\n  data() {\n    return {\n      tot: \"\",\n      appLoading: false,\n      totalBlogs: 0, // Initialize the totalBlogs data property\n      yourBlogsCount: 0,\n      totalUsers: 0, // Initialize the yourBlogsCount data property\n      userType: localStorage.getItem(\"userType\"), // Retrieve userType from localStorage\n    };\n  },\n  mounted() {\n    // Call the method to fetch counts based on userType\n    if (this.userType === \"admin\") {\n      this.fetchTotalBlogs();\n      this.fetchTotalUsers();\n    } else if (this.userType === \"user\") {\n      this.fetchUserBlogsCount();\n    }\n  },\n  methods: {\n    fetchTotalUsers() {\n      this.appLoading = true;\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n      // Query the users collection and get the total count of documents\n      db.collection(\"users\")\n        .get()\n        .then((querySnapshot) => {\n          // Set the totalUsers data property to the count of documents\n          this.totalUsers = querySnapshot.size;\n          this.tot = this.totalUsers;\n          console.log(\"tot is\", this.tot);\n          this.appLoading = false;\n        })\n        .catch((error) => {\n          // Handle any errors that occur during the Firestore operation\n          console.error(\"Error fetching total users:\", error);\n          // Optionally, provide feedback to the user about the error\n        });\n    },\n    fetchTotalBlogs() {\n      this.appLoading = true;\n\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n\n      // Query the blogs collection and get the total count of documents\n      db.collection(\"blogs\")\n        .get()\n        .then((querySnapshot) => {\n          // Set the totalBlogs data property to the count of documents\n          this.totalBlogs = querySnapshot.size;\n          this.appLoading = false;\n        })\n        .catch((error) => {\n          // Handle any errors that occur during the Firestore operation\n          console.error(\"Error fetching total blogs:\", error);\n          // Optionally, provide feedback to the user about the error\n        });\n    },\n    fetchUserBlogsCount() {\n      this.appLoading = true;\n\n      // Get the current user's ID\n      const userId = firebase.auth().currentUser.uid;\n\n      // Get a reference to the Firestore database\n      const db = firebase.firestore();\n\n      // Query the blogs collection and filter by the current user's ID\n      db.collection(\"blogs\")\n        .where(\"userId\", \"==\", userId) // Replace \"userId\" with the field name that represents the user ID in your blogs collection\n        .get()\n        .then((querySnapshot) => {\n          // Set the yourBlogsCount data property to the count of documents\n          this.yourBlogsCount = querySnapshot.size;\n          this.appLoading = false;\n        })\n        .catch((error) => {\n          // Handle any errors that occur during the Firestore operation\n          console.error(\"Error fetching user blogs count:\", error);\n          // Optionally, provide feedback to the user about the error\n          this.appLoading = false;\n        });\n    },\n  },\n};\n</script>\n\n<style>\n/* Your styles */\n</style>\n\n\n<style>\n.gradient-card {\n  background: linear-gradient(to right, #aa4b6b, #6b6b83, #3b8d99);\n}\n\n.gradient-card2 {\n  background: linear-gradient(to right, #7f7fd5, #86a8e7, #91eae4);\n}\n\n.gradient-card3 {\n  background: linear-gradient(to right, #659999, #f4791f);\n}\n\n.gradient-card4 {\n  background: linear-gradient(to right, #009fff, #ec2f4b);\n}\n\n.gradient-card5 {\n  background: linear-gradient(to right, #59c173, #a17fe0, #5d26c1);\n}\n\n.gradient-card6 {\n  background: linear-gradient(to right, #bdc3c7, #2c3e50);\n}\n</style>"],"mappings":"AAkIA,OAAAA,QAAA;AACA;AACA,OAAAC,cAAA;AACA,OAAAC,kBAAA;AACA;;AAEA;EACAC,UAAA;IACAF,cAAA;IACAC;IACA;EACA;EACAE,KAAA;IACA;MACAC,GAAA;MACAC,UAAA;MACAC,UAAA;MAAA;MACAC,cAAA;MACAC,UAAA;MAAA;MACAC,QAAA,EAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,SAAAH,QAAA;MACA,KAAAI,eAAA;MACA,KAAAC,eAAA;IACA,gBAAAL,QAAA;MACA,KAAAM,mBAAA;IACA;EACA;EACAC,OAAA;IACAF,gBAAA;MACA,KAAAT,UAAA;MACA;MACA,MAAAY,EAAA,GAAAlB,QAAA,CAAAmB,SAAA;MACA;MACAD,EAAA,CAAAE,UAAA,UACAC,GAAA,GACAC,IAAA,CAAAC,aAAA;QACA;QACA,KAAAd,UAAA,GAAAc,aAAA,CAAAC,IAAA;QACA,KAAAnB,GAAA,QAAAI,UAAA;QACAgB,OAAA,CAAAC,GAAA,gBAAArB,GAAA;QACA,KAAAC,UAAA;MACA,GACAqB,KAAA,CAAAC,KAAA;QACA;QACAH,OAAA,CAAAG,KAAA,gCAAAA,KAAA;QACA;MACA;IACA;IACAd,gBAAA;MACA,KAAAR,UAAA;;MAEA;MACA,MAAAY,EAAA,GAAAlB,QAAA,CAAAmB,SAAA;;MAEA;MACAD,EAAA,CAAAE,UAAA,UACAC,GAAA,GACAC,IAAA,CAAAC,aAAA;QACA;QACA,KAAAhB,UAAA,GAAAgB,aAAA,CAAAC,IAAA;QACA,KAAAlB,UAAA;MACA,GACAqB,KAAA,CAAAC,KAAA;QACA;QACAH,OAAA,CAAAG,KAAA,gCAAAA,KAAA;QACA;MACA;IACA;IACAZ,oBAAA;MACA,KAAAV,UAAA;;MAEA;MACA,MAAAuB,MAAA,GAAA7B,QAAA,CAAA8B,IAAA,GAAAC,WAAA,CAAAC,GAAA;;MAEA;MACA,MAAAd,EAAA,GAAAlB,QAAA,CAAAmB,SAAA;;MAEA;MACAD,EAAA,CAAAE,UAAA,UACAa,KAAA,iBAAAJ,MAAA;MAAA,CACAR,GAAA,GACAC,IAAA,CAAAC,aAAA;QACA;QACA,KAAAf,cAAA,GAAAe,aAAA,CAAAC,IAAA;QACA,KAAAlB,UAAA;MACA,GACAqB,KAAA,CAAAC,KAAA;QACA;QACAH,OAAA,CAAAG,KAAA,qCAAAA,KAAA;QACA;QACA,KAAAtB,UAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}