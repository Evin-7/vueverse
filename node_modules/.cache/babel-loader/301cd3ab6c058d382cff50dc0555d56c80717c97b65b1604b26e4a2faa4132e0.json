{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nexport default {\n  name: \"FirebaseTest\",\n  data() {\n    return {\n      password: \"\",\n      msg: null,\n      timeout: 5000,\n      showSnackBar: false,\n      email: \"\",\n      showPassword: false,\n      phoneNumber: \"\",\n      confirmpassword: \"\",\n      showConfirmPassword: false\n    };\n  },\n  methods: {\n    validateInput() {\n      // Regular expression pattern for email validation\n      const emailPattern = /.+@.+\\..+/;\n\n      // Regular expression pattern for phone number validation (10 digits)\n      const phoneNumberPattern = /^\\d{10}$/;\n      if (!this.email) {\n        this.msg = \"Please provide an email\";\n        this.showSnackBar = true;\n        return;\n      } else if (!emailPattern.test(this.email)) {\n        this.msg = \"Please provide a valid email\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.phoneNumber) {\n        this.msg = \"Please provide a phone number\";\n        this.showSnackBar = true;\n        return;\n      } else if (!phoneNumberPattern.test(this.phoneNumber)) {\n        this.msg = \"Please provide a valid phone number (10 digits)\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.password) {\n        this.msg = \"Please provide a password\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.confirmpassword) {\n        this.msg = \"Please confirm the password\";\n        this.showSnackBar = true;\n        return;\n      } else if (this.password !== this.confirmpassword) {\n        this.msg = \"Passwords do not match\";\n        this.showSnackBar = true;\n        return;\n      } else {\n        this.msg = \"User  Registered successfully\";\n        this.showSnackBar = true;\n        this.signUp();\n      }\n    },\n    signUp() {\n      // Check if both email, password, and phone number are provided\n      if (!this.email || !this.password || !this.phoneNumber) {\n        // Provide feedback to the user about missing information\n        console.error(\"Please enter email, password, and phone number\");\n        // Optionally, show a snackbar or alert message to the user\n        return;\n      }\n\n      // Create a new user with email, password, and phone number\n      firebase.auth().createUserWithEmailAndPassword(this.email, this.password).then(userCredential => {\n        // User creation successful, get the user's unique ID\n        const userId = userCredential.user.uid;\n        // Initialize Firestore database\n        const db = firebase.firestore();\n        // Store additional user data in a 'users' collection\n        db.collection(\"users\").doc(userId).set({\n          email: this.email,\n          phoneNumber: this.phoneNumber\n          // You can add more user data fields here if needed\n        }).then(() => {\n          // User data stored successfully\n          console.log(\"User data stored in Firestore\");\n\n          // Optionally, you can clear the form fields after signup\n          this.email = \"\";\n          this.phoneNumber = \"\";\n          this.password = \"\";\n          this.confirmpassword = \"\";\n          // Redirect the user to the login page\n          this.$router.push({\n            path: \"/\"\n          });\n        }).catch(error => {\n          // Handle any errors that occur during Firestore operation\n          console.error(\"Error storing user data:\", error);\n          // Optionally, provide feedback to the user about the error\n        });\n      }).catch(error => {\n        // Handle errors that occur during user creation\n        console.error(\"Error creating user:\", error);\n        // Optionally, provide feedback to the user about the error\n      });\n    },\n    loginPage() {\n      this.$router.push({\n        path: \"/\"\n      });\n    },\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleConfirmPasswordVisibility() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    }\n  }\n};","map":{"version":3,"names":["firebase","name","data","password","msg","timeout","showSnackBar","email","showPassword","phoneNumber","confirmpassword","showConfirmPassword","methods","validateInput","emailPattern","phoneNumberPattern","test","signUp","console","error","auth","createUserWithEmailAndPassword","then","userCredential","userId","user","uid","db","firestore","collection","doc","set","log","$router","push","path","catch","loginPage","togglePasswordVisibility","toggleConfirmPasswordVisibility"],"sources":["public/SignUppage.vue"],"sourcesContent":["<template>\n  <div>\n    <v-snackbar v-model=\"showSnackBar\" color=\"white\" right :timeout=\"timeout\">\n      <v-layout wrap justify-center>\n        <v-flex text-left class=\"align-self-center\">\n          <span style=\"color: #192841\">\n            {{ msg }}\n          </span>\n        </v-flex>\n        <v-flex text-right>\n          <v-btn small :ripple=\"false\" text @click=\"showSnackBar = false\">\n            <v-icon style=\"color: #192841\">mdi-close</v-icon>\n          </v-btn>\n        </v-flex>\n      </v-layout>\n    </v-snackbar>\n    <v-layout wrap>\n      <v-flex xs12>\n        <v-img\n          style=\"height: 100vh\"\n          text\n          src=\"../src/assets/Imagesmainbackground.jpg\"\n        >\n          <v-layout wrap fill-height justify-center align-self-center>\n            <v-flex xs10 sm5 md4 lg3 xl2 align-self-center>\n              <v-card class=\"grey-gradient\">\n                <v-layout wrap justify-center>\n                  <v-flex xs5 pt-4>\n                    <v-img\n                      style=\"cursor: pointer\"\n                      text\n                      src=\"../src/assets/Images/mainlogovv.png\"\n                    ></v-img>\n                  </v-flex>\n\n                  <v-flex xs10 text-center pt-5>\n                    <span style=\"font-size: 15px; font-family: LexendRegular\">\n                      \"Discover, Create, Share - Your VueVerse Journey Begins\n                      Here!\"</span\n                    >\n                  </v-flex>\n\n                  <v-flex xs10 pt-5>\n                    <v-text-field\n                      label=\"Email\"\n                      dense\n                      v-model=\"email\"\n                      outlined\n                      color=\"#192841\"\n                      :rules=\"[\n                        (v) => !!v || 'Email is required',\n                        (v) => /.+@.+\\..+/.test(v) || 'Email must be valid',\n                      ]\"\n                    >\n                    </v-text-field>\n                  </v-flex>\n                  <v-flex xs10>\n                    <v-text-field\n                      label=\"Phone Number\"\n                      dense\n                      v-model=\"phoneNumber\"\n                      outlined\n                      color=\"#192841\"\n                      :rules=\"[\n                        (v) => !!v || 'Phone number is required',\n                        (v) =>\n                          /^\\d{10}$/.test(v) ||\n                          'Phone number must be 10 digits',\n                      ]\"\n                    >\n                    </v-text-field>\n                  </v-flex>\n                  <v-flex xs10>\n                    <v-text-field\n                      hide-details=\"true\"\n                      v-model=\"confirmpassword\"\n                      :type=\"showConfirmPassword ? 'text' : 'password'\"\n                      color=\"#192841\"\n                      label=\"Confirm Password\"\n                      outlined\n                      dense\n                      :append-icon=\"\n                        showConfirmPassword ? 'mdi-eye' : 'mdi-eye-off'\n                      \"\n                      @click:append=\"toggleConfirmPasswordVisibility\"\n                    ></v-text-field>\n                  </v-flex>\n\n                  <v-flex xs10 pt-7>\n                    <v-text-field\n                      hide-details=\"true\"\n                      v-model=\"password\"\n                      :type=\"showPassword ? 'text' : 'password'\"\n                      color=\"#192841\"\n                      label=\"Password\"\n                      outlined\n                      dense\n                      :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n                      @click:append=\"togglePasswordVisibility\"\n                    ></v-text-field>\n                  </v-flex>\n                  <v-flex xs10 py-3 @click=\"loginPage()\" class=\"signup-section\">\n                    Already have an account?\n                    <span class=\"login-link\">Login here!</span>\n                  </v-flex>\n\n                  <v-flex xs10 py-4>\n                    <v-btn @click=\"validateInput()\" color=\"#192841\" block>\n                      <span style=\"color: white; text-transform: none\"\n                        >Sign up</span\n                      >\n                      <v-icon color=\"white\">mdi-arrow-right-box</v-icon>\n                    </v-btn>\n                  </v-flex>\n                </v-layout>\n              </v-card>\n            </v-flex>\n          </v-layout>\n        </v-img>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n  \n  \n  <script>\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport default {\n  name: \"FirebaseTest\",\n\n  data() {\n    return {\n      password: \"\",\n      msg: null,\n      timeout: 5000,\n      showSnackBar: false,\n      email: \"\",\n      showPassword: false,\n      phoneNumber: \"\",\n      confirmpassword: \"\",\n      showConfirmPassword: false,\n    };\n  },\n  methods: {\n    validateInput() {\n      // Regular expression pattern for email validation\n      const emailPattern = /.+@.+\\..+/;\n\n      // Regular expression pattern for phone number validation (10 digits)\n      const phoneNumberPattern = /^\\d{10}$/;\n\n      if (!this.email) {\n        this.msg = \"Please provide an email\";\n        this.showSnackBar = true;\n        return;\n      } else if (!emailPattern.test(this.email)) {\n        this.msg = \"Please provide a valid email\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.phoneNumber) {\n        this.msg = \"Please provide a phone number\";\n        this.showSnackBar = true;\n        return;\n      } else if (!phoneNumberPattern.test(this.phoneNumber)) {\n        this.msg = \"Please provide a valid phone number (10 digits)\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.password) {\n        this.msg = \"Please provide a password\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.confirmpassword) {\n        this.msg = \"Please confirm the password\";\n        this.showSnackBar = true;\n        return;\n      } else if (this.password !== this.confirmpassword) {\n        this.msg = \"Passwords do not match\";\n        this.showSnackBar = true;\n        return;\n      } else {\n        this.msg = \"User  Registered successfully\";\n        this.showSnackBar = true;\n        this.signUp();\n      }\n    },\n   \n    signUp() {\n  // Check if both email, password, and phone number are provided\n  if (!this.email || !this.password || !this.phoneNumber) {\n    // Provide feedback to the user about missing information\n    console.error(\"Please enter email, password, and phone number\");\n    // Optionally, show a snackbar or alert message to the user\n    return;\n  }\n\n  // Create a new user with email, password, and phone number\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(this.email, this.password)\n    .then((userCredential) => {\n      // User creation successful, get the user's unique ID\n      const userId = userCredential.user.uid;\n      // Initialize Firestore database\n      const db = firebase.firestore();\n      // Store additional user data in a 'users' collection\n      db.collection(\"users\")\n        .doc(userId)\n        .set({\n          email: this.email,\n          phoneNumber: this.phoneNumber,\n          // You can add more user data fields here if needed\n        })\n        .then(() => {\n          // User data stored successfully\n          console.log(\"User data stored in Firestore\");\n\n          // Optionally, you can clear the form fields after signup\n          this.email = \"\";\n          this.phoneNumber = \"\";\n          this.password = \"\";\n          this.confirmpassword = \"\";\n          // Redirect the user to the login page\n          this.$router.push({ path: \"/\" });\n        })\n        .catch((error) => {\n          // Handle any errors that occur during Firestore operation\n          console.error(\"Error storing user data:\", error);\n          // Optionally, provide feedback to the user about the error\n        });\n    })\n    .catch((error) => {\n      // Handle errors that occur during user creation\n      console.error(\"Error creating user:\", error);\n      // Optionally, provide feedback to the user about the error\n    });\n},\n\n\n\nloginPage() {\n      this.$router.push({ path: \"/\" });\n    },\n\n\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleConfirmPasswordVisibility() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n  },\n};\n</script>\n  <style scoped>\n.grey-gradient {\n  background: linear-gradient(to bottom right, #f5f5f5, #ffffff);\n}\n\n.signup-link {\n  color: #007bff; /* Change the color to match your design */\n  cursor: pointer;\n  text-decoration: underline;\n}\n\n.login-link {\n  color: #007bff; /* Change the color to match your design */\n  cursor: pointer;\n  text-decoration: underline;\n}\n</style>\n  "],"mappings":";AA8HA,OAAAA,QAAA;AACA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,QAAA;MACAC,GAAA;MACAC,OAAA;MACAC,YAAA;MACAC,KAAA;MACAC,YAAA;MACAC,WAAA;MACAC,eAAA;MACAC,mBAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAA;MACA;MACA,MAAAC,YAAA;;MAEA;MACA,MAAAC,kBAAA;MAEA,UAAAR,KAAA;QACA,KAAAH,GAAA;QACA,KAAAE,YAAA;QACA;MACA,YAAAQ,YAAA,CAAAE,IAAA,MAAAT,KAAA;QACA,KAAAH,GAAA;QACA,KAAAE,YAAA;QACA;MACA,iBAAAG,WAAA;QACA,KAAAL,GAAA;QACA,KAAAE,YAAA;QACA;MACA,YAAAS,kBAAA,CAAAC,IAAA,MAAAP,WAAA;QACA,KAAAL,GAAA;QACA,KAAAE,YAAA;QACA;MACA,iBAAAH,QAAA;QACA,KAAAC,GAAA;QACA,KAAAE,YAAA;QACA;MACA,iBAAAI,eAAA;QACA,KAAAN,GAAA;QACA,KAAAE,YAAA;QACA;MACA,gBAAAH,QAAA,UAAAO,eAAA;QACA,KAAAN,GAAA;QACA,KAAAE,YAAA;QACA;MACA;QACA,KAAAF,GAAA;QACA,KAAAE,YAAA;QACA,KAAAW,MAAA;MACA;IACA;IAEAA,OAAA;MACA;MACA,UAAAV,KAAA,UAAAJ,QAAA,UAAAM,WAAA;QACA;QACAS,OAAA,CAAAC,KAAA;QACA;QACA;MACA;;MAEA;MACAnB,QAAA,CACAoB,IAAA,GACAC,8BAAA,MAAAd,KAAA,OAAAJ,QAAA,EACAmB,IAAA,CAAAC,cAAA;QACA;QACA,MAAAC,MAAA,GAAAD,cAAA,CAAAE,IAAA,CAAAC,GAAA;QACA;QACA,MAAAC,EAAA,GAAA3B,QAAA,CAAA4B,SAAA;QACA;QACAD,EAAA,CAAAE,UAAA,UACAC,GAAA,CAAAN,MAAA,EACAO,GAAA;UACAxB,KAAA,OAAAA,KAAA;UACAE,WAAA,OAAAA;UACA;QACA,GACAa,IAAA;UACA;UACAJ,OAAA,CAAAc,GAAA;;UAEA;UACA,KAAAzB,KAAA;UACA,KAAAE,WAAA;UACA,KAAAN,QAAA;UACA,KAAAO,eAAA;UACA;UACA,KAAAuB,OAAA,CAAAC,IAAA;YAAAC,IAAA;UAAA;QACA,GACAC,KAAA,CAAAjB,KAAA;UACA;UACAD,OAAA,CAAAC,KAAA,6BAAAA,KAAA;UACA;QACA;MACA,GACAiB,KAAA,CAAAjB,KAAA;QACA;QACAD,OAAA,CAAAC,KAAA,yBAAAA,KAAA;QACA;MACA;IACA;IAIAkB,UAAA;MACA,KAAAJ,OAAA,CAAAC,IAAA;QAAAC,IAAA;MAAA;IACA;IAGAG,yBAAA;MACA,KAAA9B,YAAA,SAAAA,YAAA;IACA;IACA+B,gCAAA;MACA,KAAA5B,mBAAA,SAAAA,mBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}