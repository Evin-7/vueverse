{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nexport default {\n  name: 'FirebaseTest',\n  data() {\n    return {\n      password: \"\",\n      msg: null,\n      timeout: 5000,\n      showSnackBar: false,\n      showPassword: false,\n      phoneNumber: \"\"\n    };\n  },\n  methods: {\n    validateInput() {\n      // Check if the username (email or phone number) and password are both provided\n      if (!this.phoneNumber && !this.password) {\n        this.msg = \"Please enter your email and password\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.phoneNumber) {\n        this.msg = \"Please enter your email\";\n        this.showSnackBar = true;\n        return;\n      } else if (!this.password) {\n        this.msg = \"Please enter your password\";\n        this.showSnackBar = true;\n        return;\n      }\n\n      // Authenticate user using Firebase Authentication\n      firebase.auth().signInWithEmailAndPassword(this.phoneNumber, this.password).then(userCredential => {\n        // User authentication successful\n        const user = userCredential.user;\n\n        // Optionally, you can clear the form fields after successful login\n        this.phoneNumber = '';\n        this.password = '';\n\n        // Set user type as regular user\n        localStorage.setItem('userType', 'user');\n\n        // Redirect regular users to another page after successful login\n        // window.location.href = '/dashboard'; // Redirect to dashboard page\n        this.msg = \"Login successful\"; // Provide feedback to regular users\n        this.showSnackBar = true;\n        this.login(); // Perform login operation\n\n        // Do something with the 'user' variable if needed\n        console.log(\"Authenticated user:\", user);\n      }).catch(error => {\n        // Handle errors that occur during user authentication\n        this.msg = \"Incorrect username or password\"; // Provide error message\n        this.showSnackBar = true;\n        console.error(\"Error signing in:\", error);\n      });\n    },\n    login() {\n      // Get the currently authenticated user\n      const currentUser = firebase.auth().currentUser;\n\n      // Check if there's a user\n      if (currentUser) {\n        // Check if the user's email matches the admin email\n        if (currentUser.email === \"admin@vueverse.com\") {\n          // Set userType as admin\n          localStorage.setItem('userType', 'admin');\n        } else {\n          // Set userType as regular user\n          localStorage.setItem('userType', 'user');\n        }\n\n        // Retrieve the user's authentication token\n        currentUser.getIdToken( /* forceRefresh */true).then(token => {\n          // Store the authentication token in localStorage\n          localStorage.setItem('token', token);\n\n          // Set isLoggedIn flag to true in local storage\n          localStorage.setItem('isLoggedIn', true);\n\n          // Check if the current route is not already the dashboard route\n          if (this.$route.path !== '/dashboard') {\n            // Redirect the user to the dashboard page\n            this.$router.push({\n              path: \"/dashboard\"\n            });\n          }\n        }).catch(error => {\n          console.error(\"Error retrieving user token:\", error);\n          // Handle error if unable to retrieve token\n        });\n      } else {\n        console.error(\"No user is currently authenticated.\");\n      }\n    },\n    signUp() {\n      this.$router.push({\n        path: \"/signup\"\n      });\n    },\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    }\n  }\n};","map":{"version":3,"names":["firebase","name","data","password","msg","timeout","showSnackBar","showPassword","phoneNumber","methods","validateInput","auth","signInWithEmailAndPassword","then","userCredential","user","localStorage","setItem","login","console","log","catch","error","currentUser","email","getIdToken","token","$route","path","$router","push","signUp","togglePasswordVisibility"],"sources":["public/LoginPage.vue"],"sourcesContent":["<template>\n  <div>\n    <v-snackbar v-model=\"showSnackBar\" color=\"white\" right :timeout=\"timeout\">\n      <v-layout wrap justify-center>\n        <v-flex text-left class=\"align-self-center\">\n          <span style=\"color: #192841\">\n            {{ msg }}\n          </span>\n        </v-flex>\n        <v-flex text-right>\n          <v-btn small :ripple=\"false\" text @click=\"showSnackBar = false\">\n            <v-icon style=\"color: #192841\">mdi-close</v-icon>\n          </v-btn>\n        </v-flex>\n      </v-layout>\n    </v-snackbar>\n    <v-layout wrap>\n      <v-flex xs12>\n        <v-img\n          style=\"height: 100vh\"\n          text\n          src=\".../.\"\n        >\n          <v-layout wrap fill-height justify-center align-self-center>\n            <v-flex xs10 sm5 md4 lg3 xl2 align-self-center>\n              <v-card class=\"grey-gradient\">\n                <v-layout wrap justify-center>\n                  <v-flex xs5 pt-4>\n                    <v-img\n                      style=\"cursor: pointer\"\n                      text\n                      src=\"../assets/Images/mainlogovv.png\"\n                    ></v-img>\n                  </v-flex>\n\n                  <v-flex xs10 text-center pt-7>\n                    <span style=\"font-size: 15px;font-family: LexendRegular;\">\n                      \"Discover, Create, Share - Your VueVerse Journey Begins\n                      Here!\"</span\n                    >\n                  </v-flex>\n\n                  <v-flex xs10 pt-7>\n                    <v-text-field\n                      label=\"E-mail\"\n                      dense\n                      v-model=\"phoneNumber\"\n                      outlined\n                      hide-details=\"true\"\n                      color=\"#192841\"\n                    >\n                    </v-text-field>\n                  </v-flex>\n                  <v-flex xs10 pt-7>\n                    <v-text-field\n                      hide-details=\"true\"\n                      v-model=\"password\"\n                      :type=\"showPassword ? 'text' : 'password'\"\n                      color=\"#192841\"\n                      label=\"Password\"\n                      outlined\n                      dense\n                      :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n                      @click:append=\"togglePasswordVisibility\"\n                    ></v-text-field>\n                  </v-flex>\n\n                  <v-flex xs10 py-3 @click=\"signUp()\">\n  New here? <span class=\"signup-link\">Sign up now!</span>\n</v-flex>\n\n\n                  <v-flex xs10 py-4>\n                    <v-btn @click=\"validateInput()\" color=\"#192841\" block>\n                      <span style=\"color: white; text-transform: none\"\n                        >Login</span\n                      >\n                      <v-icon color=\"white\">mdi-login</v-icon>\n                    </v-btn>\n                  </v-flex>\n                </v-layout>\n              </v-card>\n            </v-flex>\n          </v-layout>\n        </v-img>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n\n\n<script>\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nexport default {\n  name: 'FirebaseTest',\n\n  data() {\n    return {\n      password: \"\",\n      msg: null,\n      timeout: 5000,\n      showSnackBar: false,\n\n      showPassword: false,\n      phoneNumber:\"\",\n\n    };\n  },\n  methods: {\n    validateInput() {\n  // Check if the username (email or phone number) and password are both provided\n  if (!this.phoneNumber && !this.password) {\n    this.msg = \"Please enter your email and password\";\n    this.showSnackBar = true;\n    return;\n  } else if (!this.phoneNumber) {\n    this.msg = \"Please enter your email\";\n    this.showSnackBar = true;\n    return;\n  } else if (!this.password) {\n    this.msg = \"Please enter your password\";\n    this.showSnackBar = true;\n    return;\n  }\n\n  \n    // Authenticate user using Firebase Authentication\n    firebase.auth().signInWithEmailAndPassword(this.phoneNumber, this.password)\n      .then((userCredential) => {\n        // User authentication successful\n        const user = userCredential.user;\n\n        // Optionally, you can clear the form fields after successful login\n        this.phoneNumber = '';\n        this.password = '';\n\n        // Set user type as regular user\n    localStorage.setItem('userType', 'user');\n      \n\n        // Redirect regular users to another page after successful login\n        // window.location.href = '/dashboard'; // Redirect to dashboard page\n        this.msg = \"Login successful\"; // Provide feedback to regular users\n        this.showSnackBar = true;\n        this.login(); // Perform login operation\n\n        // Do something with the 'user' variable if needed\n        console.log(\"Authenticated user:\", user);\n      })\n      .catch((error) => {\n        // Handle errors that occur during user authentication\n        this.msg = \"Incorrect username or password\"; // Provide error message\n        this.showSnackBar = true;\n        console.error(\"Error signing in:\", error);\n      });\n  \n},\n\n\n\n\nlogin() {\n  // Get the currently authenticated user\n  const currentUser = firebase.auth().currentUser;\n\n  // Check if there's a user\n  if (currentUser) {\n    // Check if the user's email matches the admin email\n    if (currentUser.email === \"admin@vueverse.com\") {\n      // Set userType as admin\n      localStorage.setItem('userType', 'admin');\n    } else {\n      // Set userType as regular user\n      localStorage.setItem('userType', 'user');\n    }\n\n    // Retrieve the user's authentication token\n    currentUser.getIdToken(/* forceRefresh */ true)\n      .then(token => {\n        // Store the authentication token in localStorage\n        localStorage.setItem('token', token);\n        \n        // Set isLoggedIn flag to true in local storage\n        localStorage.setItem('isLoggedIn', true);\n\n        // Check if the current route is not already the dashboard route\n        if (this.$route.path !== '/dashboard') {\n          // Redirect the user to the dashboard page\n          this.$router.push({ path: \"/dashboard\" });\n        }\n      })\n      .catch(error => {\n        console.error(\"Error retrieving user token:\", error);\n        // Handle error if unable to retrieve token\n      });\n  } else {\n    console.error(\"No user is currently authenticated.\");\n  }\n},\n\n\nsignUp(){\n\n  this.$router.push({ path: \"/signup\" });\n\n},\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n  },\n};\n</script>\n<style scoped>\n.grey-gradient {\n  background: linear-gradient(to bottom right, #f5f5f5, #ffffff);\n}\n\n.signup-link {\n  color: #007bff; /* Change the color to match your design */\n  cursor: pointer;\n  text-decoration: underline;\n}\n\n</style>\n"],"mappings":";AA4FA,OAAAA,QAAA;AACA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,QAAA;MACAC,GAAA;MACAC,OAAA;MACAC,YAAA;MAEAC,YAAA;MACAC,WAAA;IAEA;EACA;EACAC,OAAA;IACAC,cAAA;MACA;MACA,UAAAF,WAAA,UAAAL,QAAA;QACA,KAAAC,GAAA;QACA,KAAAE,YAAA;QACA;MACA,iBAAAE,WAAA;QACA,KAAAJ,GAAA;QACA,KAAAE,YAAA;QACA;MACA,iBAAAH,QAAA;QACA,KAAAC,GAAA;QACA,KAAAE,YAAA;QACA;MACA;;MAGA;MACAN,QAAA,CAAAW,IAAA,GAAAC,0BAAA,MAAAJ,WAAA,OAAAL,QAAA,EACAU,IAAA,CAAAC,cAAA;QACA;QACA,MAAAC,IAAA,GAAAD,cAAA,CAAAC,IAAA;;QAEA;QACA,KAAAP,WAAA;QACA,KAAAL,QAAA;;QAEA;QACAa,YAAA,CAAAC,OAAA;;QAGA;QACA;QACA,KAAAb,GAAA;QACA,KAAAE,YAAA;QACA,KAAAY,KAAA;;QAEA;QACAC,OAAA,CAAAC,GAAA,wBAAAL,IAAA;MACA,GACAM,KAAA,CAAAC,KAAA;QACA;QACA,KAAAlB,GAAA;QACA,KAAAE,YAAA;QACAa,OAAA,CAAAG,KAAA,sBAAAA,KAAA;MACA;IAEA;IAKAJ,MAAA;MACA;MACA,MAAAK,WAAA,GAAAvB,QAAA,CAAAW,IAAA,GAAAY,WAAA;;MAEA;MACA,IAAAA,WAAA;QACA;QACA,IAAAA,WAAA,CAAAC,KAAA;UACA;UACAR,YAAA,CAAAC,OAAA;QACA;UACA;UACAD,YAAA,CAAAC,OAAA;QACA;;QAEA;QACAM,WAAA,CAAAE,UAAA,0BACAZ,IAAA,CAAAa,KAAA;UACA;UACAV,YAAA,CAAAC,OAAA,UAAAS,KAAA;;UAEA;UACAV,YAAA,CAAAC,OAAA;;UAEA;UACA,SAAAU,MAAA,CAAAC,IAAA;YACA;YACA,KAAAC,OAAA,CAAAC,IAAA;cAAAF,IAAA;YAAA;UACA;QACA,GACAP,KAAA,CAAAC,KAAA;UACAH,OAAA,CAAAG,KAAA,iCAAAA,KAAA;UACA;QACA;MACA;QACAH,OAAA,CAAAG,KAAA;MACA;IACA;IAGAS,OAAA;MAEA,KAAAF,OAAA,CAAAC,IAAA;QAAAF,IAAA;MAAA;IAEA;IACAI,yBAAA;MACA,KAAAzB,YAAA,SAAAA,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}